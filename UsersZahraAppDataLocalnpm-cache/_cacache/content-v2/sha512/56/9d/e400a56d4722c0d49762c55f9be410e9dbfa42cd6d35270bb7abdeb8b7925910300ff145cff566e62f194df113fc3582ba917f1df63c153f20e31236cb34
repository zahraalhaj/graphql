{"_id":"@tsparticles/react","name":"@tsparticles/react","dist-tags":{"latest":"3.0.0"},"versions":{"3.0.0":{"name":"@tsparticles/react","version":"3.0.0","type":"module","main":"dist/index.js","types":"dist/index.d.ts","scripts":{"dev":"vite","build":"tsc && vite build","build:ci":"tsc && vite build","lint":"eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0","preview":"vite preview","prepublishOnly":"pnpm run build"},"peerDependencies":{"@tsparticles/engine":"^3.0.2","react":">=16.8.0","react-dom":">=16.8.0"},"devDependencies":{"@tsparticles/engine":"^3.0.2","@types/react":"^18.2.42","@types/react-dom":"^18.2.17","@typescript-eslint/eslint-plugin":"^6.13.2","@typescript-eslint/parser":"^6.13.2","@vitejs/plugin-react":"^4.2.1","eslint":"^8.55.0","eslint-plugin-react-hooks":"^4.6.0","eslint-plugin-react-refresh":"^0.4.5","glob":"^10.3.10","react":"^18.2.0","react-dom":"^18.2.0","typescript":"^5.3.3","vite":"^5.0.6","vite-plugin-dts":"^3.6.4","vite-plugin-lib-inject-css":"^1.3.0"},"publishConfig":{"access":"public"},"gitHead":"06ad7ff6a21833bb7c62c443b2cfb6bbcba58273","description":"[![banner](https://particles.js.org/images/banner3.png)](https://particles.js.org)","_id":"@tsparticles/react@3.0.0","_nodeVersion":"20.9.0","_npmVersion":"lerna/8.0.0/node@v20.9.0+arm64 (darwin)","dist":{"integrity":"sha512-hjGEtTT1cwv6BcjL+GcVgH++KYs52bIuQGW3PWv7z3tMa8g0bd6RI/vWSLj7p//NZ3uTjEIeilYIUPBh7Jfq/Q==","shasum":"d0a794ba53164eb39ce88a3961be723a636b37c0","tarball":"https://registry.npmjs.org/@tsparticles/react/-/react-3.0.0.tgz","fileCount":9,"unpackedSize":18938,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC2kIYxZb7GwDxb1CzIgG5POSUHJmRwmJXgX4ZREGdDZQIgSx6hU0Obx2sGNKTynhjGLOS+JaygiaCG1dXtDKjw4Bg="}]},"_npmUser":{"name":"matteobruni","email":"ar3s@icloud.com"},"directories":{},"maintainers":[{"name":"matteobruni","email":"ar3s@icloud.com"},{"name":"ar3s","email":"mbruni88@icloud.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/react_3.0.0_1701963755101_0.14593978064162982"},"_hasShrinkwrap":false}},"time":{"created":"2023-12-07T15:42:34.990Z","3.0.0":"2023-12-07T15:42:35.280Z","modified":"2023-12-07T15:42:35.603Z"},"maintainers":[{"name":"matteobruni","email":"ar3s@icloud.com"},{"name":"ar3s","email":"mbruni88@icloud.com"}],"description":"[![banner](https://particles.js.org/images/banner3.png)](https://particles.js.org)","readme":"[![banner](https://particles.js.org/images/banner3.png)](https://particles.js.org)\n\n# @tsparticles/react\n\n[![npm](https://img.shields.io/npm/v/@tsparticles/react)](https://www.npmjs.com/package/@tsparticles/react) [![npm](https://img.shields.io/npm/dm/@tsparticles/react)](https://www.npmjs.com/package/@tsparticles/react) [![GitHub Sponsors](https://img.shields.io/github/sponsors/matteobruni)](https://github.com/sponsors/matteobruni)\n\nOfficial [tsParticles](https://github.com/tsparticles/tsparticles) ReactJS component\n\n[![Slack](https://particles.js.org/images/slack.png)](https://join.slack.com/t/tsparticles/shared_invite/enQtOTcxNTQxNjQ4NzkxLWE2MTZhZWExMWRmOWI5MTMxNjczOGE1Yjk0MjViYjdkYTUzODM3OTc5MGQ5MjFlODc4MzE0N2Q1OWQxZDc1YzI) [![Discord](https://particles.js.org/images/discord.png)](https://discord.gg/hACwv45Hme) [![Telegram](https://particles.js.org/images/telegram.png)](https://t.me/tsparticles)\n\n[![tsParticles Product Hunt](https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=186113&theme=light)](https://www.producthunt.com/posts/tsparticles?utm_source=badge-featured&utm_medium=badge&utm_souce=badge-tsparticles\") <a href=\"https://www.buymeacoffee.com/matteobruni\"><img src=\"https://img.buymeacoffee.com/button-api/?text=Buy me a beer&emoji=🍺&slug=matteobruni&button_colour=5F7FFF&font_colour=ffffff&font_family=Arial&outline_colour=000000&coffee_colour=FFDD00\"></a>\n\n## Installation\n\n```shell\nnpm install @tsparticles/react\n```\n\nor\n\n```shell\nyarn add @tsparticles/react\n```\n\n### TypeScript Installation\n\n```shell\nnpm install @tsparticles/react @tsparticles/engine\n```\n\nor\n\n```shell\nyarn add @tsparticles/react @tsparticles/engine\n```\n\n[@tsparticles/engine](https://npmjs.com/package/@tsparticles/engine) is the core package for [tsParticles](https://particles.js.org), it contains useful types like `ISourceOptions`, `Engine` or `Container`.\n\n### create-react-app\n\nStarting from version 1.17.0 there are two official `create-react-app` templates:\n\n- `cra-template-particles`: Simple ReactJS template with full screen particles, using JavaScript\n- `cra-template-particles-typescript`: Simple ReactJS template with full screen particles, using TypeScript\n\nYou can simply install them using the `create-react-app` command like this:\n\n```shell\n$ create-react-app your_app --template particles\n```\n\nor\n\n```shell\n$ create-react-app your_app --template particles-typescript\n```\n\n## How to use\n\n### Code\n\nExamples:\n\n#### Options object\n\n##### JavaScript support - object\n\n```jsx\nimport { useCallback, useEffect, useState } from \"react\";\nimport Particles, { initParticlesEngine } from \"@tsparticles/react\";\n// import { loadAll } from \"@/tsparticles/all\"; // if you are going to use `loadAll`, install the \"@tsparticles/all\" package too.\n// import { loadFull } from \"tsparticles\"; // if you are going to use `loadFull`, install the \"tsparticles\" package too.\nimport { loadSlim } from \"@tsparticles/slim\"; // if you are going to use `loadSlim`, install the \"@tsparticles/slim\" package too.\n// import { loadBasic } from \"@tsparticles/basic\"; // if you are going to use `loadBasic`, install the \"@tsparticles/basic\" package too.\n\nconst App = () => {\n    const [ init, setInit ] = useState(false);\n\n    // this should be run only once per application lifetime\n    useEffect(() => {\n        initParticlesEngine(async (engine) => {\n            // you can initiate the tsParticles instance (engine) here, adding custom shapes or presets\n            // this loads the tsparticles package bundle, it's the easiest method for getting everything ready\n            // starting from v2 you can add only the features you need reducing the bundle size\n            //await loadAll(engine);\n            //await loadFull(engine);\n            await loadSlim(engine);\n            //await loadBasic(engine);\n        }).then(() => {\n            setInit(true);\n        });\n    }, []);\n\n    const particlesLoaded = (container) => {\n        console.log(container);\n    };\n\n    return (\n        { init && <Particles\n            id=\"tsparticles\"\n            particlesLoaded={particlesLoaded}\n            options={{\n                background: {\n                    color: {\n                        value: \"#0d47a1\",\n                    },\n                },\n                fpsLimit: 120,\n                interactivity: {\n                    events: {\n                        onClick: {\n                            enable: true,\n                            mode: \"push\",\n                        },\n                        onHover: {\n                            enable: true,\n                            mode: \"repulse\",\n                        },\n                        resize: true,\n                    },\n                    modes: {\n                        push: {\n                            quantity: 4,\n                        },\n                        repulse: {\n                            distance: 200,\n                            duration: 0.4,\n                        },\n                    },\n                },\n                particles: {\n                    color: {\n                        value: \"#ffffff\",\n                    },\n                    links: {\n                        color: \"#ffffff\",\n                        distance: 150,\n                        enable: true,\n                        opacity: 0.5,\n                        width: 1,\n                    },\n                    move: {\n                        direction: \"none\",\n                        enable: true,\n                        outModes: {\n                            default: \"bounce\",\n                        },\n                        random: false,\n                        speed: 6,\n                        straight: false,\n                    },\n                    number: {\n                        density: {\n                            enable: true,\n                            area: 800,\n                        },\n                        value: 80,\n                    },\n                    opacity: {\n                        value: 0.5,\n                    },\n                    shape: {\n                        type: \"circle\",\n                    },\n                    size: {\n                        value: { min: 1, max: 5 },\n                    },\n                },\n                detectRetina: true,\n            }}\n        />\n}\n)\n    ;\n};\n```\n\n##### TypeScript support - object\n\n```tsx\nimport { useCallback, useEffect, useState } from \"react\";\nimport Particles, { initParticlesEngine } from \"@tsparticles/react\";\nimport type { Container, Engine } from \"@tsparticles/engine\";\n// import { loadAll } from \"@/tsparticles/all\"; // if you are going to use `loadAll`, install the \"@tsparticles/all\" package too.\n// import { loadFull } from \"tsparticles\"; // if you are going to use `loadFull`, install the \"tsparticles\" package too.\nimport { loadSlim } from \"@tsparticles/slim\"; // if you are going to use `loadSlim`, install the \"@tsparticles/slim\" package too.\n// import { loadBasic } from \"@tsparticles/basic\"; // if you are going to use `loadBasic`, install the \"@tsparticles/basic\" package too.\n\nconst App = () => {\n    const [ init, setInit ] = useState(false);\n\n    // this should be run only once per application lifetime\n    useEffect(() => {\n        initParticlesEngine(async (engine) => {\n            // you can initiate the tsParticles instance (engine) here, adding custom shapes or presets\n            // this loads the tsparticles package bundle, it's the easiest method for getting everything ready\n            // starting from v2 you can add only the features you need reducing the bundle size\n            //await loadAll(engine);\n            //await loadFull(engine);\n            await loadSlim(engine);\n            //await loadBasic(engine);\n        }).then(() => {\n            setInit(true);\n        });\n    }, []);\n\n    const particlesLoaded = (container) => {\n        console.log(container);\n    };\n\n    return (\n        { init && <Particles\n            id=\"tsparticles\"\n            particlesLoaded={particlesLoaded}\n            options={{\n                background: {\n                    color: {\n                        value: \"#0d47a1\",\n                    },\n                },\n                fpsLimit: 120,\n                interactivity: {\n                    events: {\n                        onClick: {\n                            enable: true,\n                            mode: \"push\",\n                        },\n                        onHover: {\n                            enable: true,\n                            mode: \"repulse\",\n                        },\n                        resize: true,\n                    },\n                    modes: {\n                        push: {\n                            quantity: 4,\n                        },\n                        repulse: {\n                            distance: 200,\n                            duration: 0.4,\n                        },\n                    },\n                },\n                particles: {\n                    color: {\n                        value: \"#ffffff\",\n                    },\n                    links: {\n                        color: \"#ffffff\",\n                        distance: 150,\n                        enable: true,\n                        opacity: 0.5,\n                        width: 1,\n                    },\n                    move: {\n                        direction: \"none\",\n                        enable: true,\n                        outModes: {\n                            default: \"bounce\",\n                        },\n                        random: false,\n                        speed: 6,\n                        straight: false,\n                    },\n                    number: {\n                        density: {\n                            enable: true,\n                            area: 800,\n                        },\n                        value: 80,\n                    },\n                    opacity: {\n                        value: 0.5,\n                    },\n                    shape: {\n                        type: \"circle\",\n                    },\n                    size: {\n                        value: { min: 1, max: 5 },\n                    },\n                },\n                detectRetina: true,\n            }}\n        />\n}\n)\n    ;\n};\n```\n\n#### Remote url\n\n##### JavaScript support - url\n\n```jsx\nimport { useCallback, useEffect, useState } from \"react\";\nimport Particles, { initParticlesEngine } from \"@tsparticles/react\";\n// import { loadAll } from \"@/tsparticles/all\"; // if you are going to use `loadAll`, install the \"@tsparticles/all\" package too.\n// import { loadFull } from \"tsparticles\"; // if you are going to use `loadFull`, install the \"tsparticles\" package too.\nimport { loadSlim } from \"@tsparticles/slim\"; // if you are going to use `loadSlim`, install the \"@tsparticles/slim\" package too.\n// import { loadBasic } from \"@tsparticles/basic\"; // if you are going to use `loadBasic`, install the \"@tsparticles/basic\" package too.\n\nconst App = () => {\n    const [ init, setInit ] = useState(false);\n\n    // this should be run only once per application lifetime\n    useEffect(() => {\n        initParticlesEngine(async (engine) => {\n            // you can initiate the tsParticles instance (engine) here, adding custom shapes or presets\n            // this loads the tsparticles package bundle, it's the easiest method for getting everything ready\n            // starting from v2 you can add only the features you need reducing the bundle size\n            //await loadAll(engine);\n            //await loadFull(engine);\n            await loadSlim(engine);\n            //await loadBasic(engine);\n        }).then(() => {\n            setInit(true);\n        });\n    }, []);\n\n    const particlesLoaded = (container) => {\n        console.log(container);\n    };\n\n    return (\n        { init && <Particles id=\"tsparticles\" url=\"http://foo.bar/particles.json\" particlesLoaded={particlesLoaded}/>\n}\n)\n    ;\n};\n```\n\n##### TypeScript support - url\n\n```tsx\nimport { useCallback, useEffect, useState } from \"react\";\nimport Particles, { initParticlesEngine } from \"@tsparticles/react\";\nimport type { Container, Engine } from \"@tsparticles/engine\";\n// import { loadAll } from \"@/tsparticles/all\"; // if you are going to use `loadAll`, install the \"@tsparticles/all\" package too.\n// import { loadFull } from \"tsparticles\"; // if you are going to use `loadFull`, install the \"tsparticles\" package too.\nimport { loadSlim } from \"@tsparticles/slim\"; // if you are going to use `loadSlim`, install the \"@tsparticles/slim\" package too.\n// import { loadBasic } from \"@tsparticles/basic\"; // if you are going to use `loadBasic`, install the \"@tsparticles/basic\" package too.\n\nconst App = () => {\n    const [ init, setInit ] = useState(false);\n\n    // this should be run only once per application lifetime\n    useEffect(() => {\n        initParticlesEngine(async (engine) => {\n            // you can initiate the tsParticles instance (engine) here, adding custom shapes or presets\n            // this loads the tsparticles package bundle, it's the easiest method for getting everything ready\n            // starting from v2 you can add only the features you need reducing the bundle size\n            //await loadAll(engine);\n            //await loadFull(engine);\n            await loadSlim(engine);\n            //await loadBasic(engine);\n        }).then(() => {\n            setInit(true);\n        });\n    }, []);\n\n    const particlesLoaded = (container) => {\n        console.log(container);\n    };\n\n    return (\n        { init && <Particles id=\"tsparticles\" url=\"http://foo.bar/particles.json\" particlesLoaded={particlesLoaded}/>\n}\n)\n    ;\n};\n```\n\n### Props\n\n| Prop      | Type   | Definition                                           |\n|-----------|--------|------------------------------------------------------|\n| id        | string | The id of the element.                               |\n| width     | string | The width of the canvas.                             |\n| height    | string | The height of the canvas.                            |\n| options   | object | The options of the particles instance.               |\n| url       | string | The remote options url, called using an AJAX request |\n| style     | object | The style of the canvas element.                     |\n| className | string | The class name of the canvas wrapper.                |\n\n#### particles.json\n\nFind all configuration\noptions [here](https://particles.js.org/docs/interfaces/tsParticles_Engine.Options_Interfaces_IOptions.IOptions.html).\n\nYou can find sample configurations [here](https://github.com/tsparticles/tsparticles/tree/main/utils/configs/src) 📖\n\n## Demos\n\nPreset demos can be found [here](https://particles.js.org/samples/presets/index.html)\n\nThere's also a CodePen collection actively maintained and updated [here](https://codepen.io/collection/DPOage)\n\nReport bugs and issues [here](https://github.com/tsparticles/tsparticles/issues)\n\n[tsParticle Website](https://particles.js.org)\n","readmeFilename":"README.md"}